// rebrithSystem.js

/**
 * Syst√®me de ‚ÄúRebirth‚Äù complet :
 * - Chaque Rebirth reset les machines √† z√©ro
 * - Co√ªt de Rebirth exponentiel (+10% par Rebirth)
 * - √Ä chaque Rebirth, tes gains par clic sont multipli√©s par +10% (cumulatif)
 * - √Ä chaque Rebirth, tu r√©cup√®res 50% de ton argent avant reset
 * - Stockage de la progression de Rebirth dans localStorage
 *
 * @param {Object} deps
 * @param {Object} deps.els            ‚Äî tes s√©lecteurs DOM (resetBtn, tapBtn, etc.)
 * @param {Object} deps.state          ‚Äî ton √©tat global (points, autoClickers, machinesLevelX, pointsPerClick‚Ä¶)
 * @param {Array<string>} deps.keys    ‚Äî la liste des cl√©s persist√©es (pour reset des machines)
 * @param {Function} deps.save         ‚Äî fonction pour sauver dans localStorage
 * @param {Function} deps.renderMain   ‚Äî fonction pour rafra√Æchir l‚Äôaffichage principal
 * @param {Function} deps.renderStore  ‚Äî fonction pour rafra√Æchir la boutique (facultatif)
 * @param {Function} deps.formatCompact‚Äî formatage compact de tes nombres
 */
export function initRebirthSystem({
  els,
  state,
  keys,
  save,
  renderMain,
  renderStore = () => {},
  formatCompact,
}) {
  // --- CONSTANTES ET √âTAT STOCK√â ---
  const STORAGE_KEY = "rebirthCount";
  const BASE_COST = 10000;   // co√ªt de base du 1er Rebirth
  let rebirthCount = parseInt(localStorage.getItem(STORAGE_KEY) || "0", 10);

  // --- FONCTIONS UTILES ---
  function getNextCost() {
    // exponentiel +10% par rebirth : base * (1.1^rebirthCount)
    return Math.floor(BASE_COST * Math.pow(1.1, rebirthCount));
  }

  function getBoostFactor() {
    // +10% de boost cumulatif : 1.1^rebirthCount
    return Math.pow(1.1, rebirthCount);
  }

  // Cr√©ation dynamique du bouton Rebirth (si pas dans ton HTML)
  let btn = els.rebirthBtn;
  if (!btn) {
    btn = document.createElement("button");
    btn.id = "rebirthBtn";
    btn.className = "btn btn-warning";
    btn.textContent = "üå± Rebirth";
    // on l‚Äôajoute juste apr√®s le bouton reset pour pas toucher √† l‚ÄôHTML
    els.resetBtn.insertAdjacentElement("afterend", btn);
    els.rebirthBtn = btn;
  }

  // Cr√©ation du bloc d‚Äôinfo Rebirth
  let info = document.getElementById("rebirthInfo");
  if (!info) {
    info = document.createElement("div");
    info.id = "rebirthInfo";
    info.style.fontSize = "0.9em";
    info.style.margin = "4px 0";
    info.style.color = "#8d8d8d";
    btn.insertAdjacentElement("afterend", info);
  }

  // Met √† jour l‚Äôaffichage du nb de Rebirths et du co√ªt
  function updateInfo() {
    const cost = getNextCost();
    info.textContent = `Rebirths : ${rebirthCount} ‚Äî Co√ªt suivant : ${formatCompact(cost)}`;
    // on met √† jour le label du bouton Tap pour afficher la puissance actuelle
    const boost = getBoostFactor();
    els.tapBtn.textContent = `üëá Tapper (+${(state.pointsPerClick * boost).toFixed(0)})`;
  }

  // Action de Rebirth
  btn.addEventListener("click", () => {
    const cost = getNextCost();
    if (state.points < cost) {
      alert("Tu n‚Äôas pas assez de points pour rebirth !");
      return;
    }
    const ok = confirm(
      `Rebirth #${rebirthCount + 1} pour ${formatCompact(cost)} points ?\n` +
      `‚Üí Toutes tes machines seront remises √† z√©ro\n` +
      `‚Üí Tu r√©cup√©reras 50% de ton argent restant apr√®s paiement\n` +
      `‚Üí Tes gains par clic et par seconde seront boost√©s de 10% de fa√ßon cumulative`
    );
    if (!ok) return;

    // 1) payer le co√ªt
    state.points -= cost;

    // 2) reset de toutes les machines et auto-clickers
    for (const k of keys) {
      if (k !== "points" && k !== "pointsPerClick") {
        // on remet √† z√©ro autoClickers et machinesLevelX
        state[k] = 0;
      }
    }

    // 3) on divise l‚Äôargent restant par 2
    state.points = Math.floor(state.points / 2);

    // 4) on augmente le compteur et on stocke
    rebirthCount += 1;
    localStorage.setItem(STORAGE_KEY, String(rebirthCount));

    // 5) on boost les points par clic
    const boost = getBoostFactor();
    state.pointsPerClick = Math.max(1, Math.floor(state.pointsPerClick * boost));

    // 6) on sauve et on rafra√Æchit l‚ÄôUI
    save();
    renderMain();
    renderStore();
    updateInfo();
  });

  // Initialisation de l‚Äôaffichage
  updateInfo();
}
