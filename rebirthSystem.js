// rebirthSystem.js

/**
 * Syst√®me de ‚ÄúRebirth‚Äù complet :
 * - Chaque Rebirth reset les machines √† z√©ro
 * - Co√ªt de Rebirth exponentiel (+10% par Rebirth)
 * - √Ä chaque Rebirth, tes gains par clic sont multipli√©s par +10% (cumulatif)
 * - √Ä chaque Rebirth, tu r√©cup√®res 50% de ton argent avant reset
 * - Stockage de la progression de Rebirth dans localStorage
 *
 * @param {Object} deps
 * @param {Object} deps.els            ‚Äî tes s√©lecteurs DOM (resetBtn, tapBtn, etc.)
 * @param {Object} deps.state          ‚Äî ton √©tat global (points, autoClickers, machinesLevelX, pointsPerClick‚Ä¶)
 * @param {Array<string>} deps.keys    ‚Äî la liste des cl√©s persist√©es (pour reset des machines)
 * @param {Function} deps.save         ‚Äî fonction pour sauver dans localStorage
 * @param {Function} deps.renderMain   ‚Äî fonction pour rafra√Æchir l‚Äôaffichage principal
 * @param {Function} deps.renderStore  ‚Äî fonction pour rafra√Æchir la boutique (facultatif)
 * @param {Function} deps.formatCompact‚Äî formatage compact de tes nombres
 */
// rebirthSystem.js

export function initRebirthSystem({
  els,
  state,
  keys,
  save,
  renderMain,
  renderStore = () => {},
  formatCompact,
}) {
  const STORAGE_KEY = "rebirthCount";
  const BASE_COST   = 10_000;
  const BOOST_RATE  = 1.1;

  // 1) Charger le compteur depuis localStorage dans state
  state.rebirths = parseInt(localStorage.getItem(STORAGE_KEY) || "0", 10);

  // 2) Helpers de co√ªt et de boost
  const getNextCost    = () => Math.floor(BASE_COST * Math.pow(BOOST_RATE, state.rebirths));
  const getBoostFactor = () => Math.pow(BOOST_RATE, state.rebirths);

  // 3) Cr√©er / r√©cup√©rer l‚Äôinfo-bar si n√©cessaire
  let info = document.getElementById("rebirthInfo");
  if (!info) {
    info = document.createElement("div");
    info.id = "rebirthInfo";
    info.style.cssText = "font-size:0.9em; margin:4px 0; color:#8d8d8d;";
    els.rebirthBtn.insertAdjacentElement("afterend", info);
  }

  // 4) Mise √† jour de l‚ÄôUI
  function updateInfo() {
    const cost  = getNextCost();
    const boost = getBoostFactor();
    info.textContent      = `Rebirths : ${state.rebirths} ‚Äî Co√ªt suivant : ${formatCompact(cost)}`;
    els.tapBtn.textContent = `üëá Tapper (+${Math.floor(state.pointsPerClick * boost)})`;
  }

  // 5) Gestion du clic Rebirth
  els.rebirthBtn.addEventListener("click", () => {
    const cost = getNextCost();
    if (state.points < cost) {
      alert("Tu n‚Äôas pas assez de points pour rebirth !");
      return;
    }

    const ok = confirm(
      `Rebirth #${state.rebirths + 1} pour ${formatCompact(cost)} points ?\n` +
      `‚Üí Toutes tes machines seront remises √† z√©ro\n` +
      `‚Üí Tu r√©cup√©reras 50% de ton argent apr√®s paiement\n` +
      `‚Üí Tes gains par clic seront boost√©s de 10% (cumulatif)`
    );
    if (!ok) return;

    // 5.1) Payer le co√ªt
    state.points -= cost;

    // 5.2) Reset machines / auto-clickers
    keys.forEach(k => {
      if (k !== "points" && k !== "pointsPerClick") {
        state[k] = 0;
      }
    });

    // 5.3) R√©cup√©rer 50% de l‚Äôargent restant
    state.points = Math.floor(state.points / 2);

    // 5.4) Incr√©menter et stocker le compteur
    state.rebirths += 1;
    localStorage.setItem(STORAGE_KEY, String(state.rebirths));

    // 5.5) Appliquer le boost de clic
    state.pointsPerClick *= BOOST_RATE;

    // 5.6) Sauvegarde et UI
    save();
    renderMain();
    renderStore();
    updateInfo();
  });

  // 6) Initial UI refresh
  updateInfo();
}
